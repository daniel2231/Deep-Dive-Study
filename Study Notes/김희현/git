# Git, Github

## 1. Git, Github 소개
### **우리가 Git을 써야 하는 이유**
1. **버전 관리** : 우리는 git을 통해서 평행우주를 만들 수 있다. 버전을 새로 컴퓨터 내에 저장하지 않아도 git을 통해서 관리할 수 있다. 또한 여러가지 버전을 한 번에 관리할 수도 있다.
2. **협업** : 컴퓨터 프로그램을 다루면서 git은 필수.

<br>

### **Git과 Github의 차이**
git|github
-|-
카메라 앱|youtube
버전 관리를 위한 소프트웨어|git에서 전송된 파일들이 저장될 공간을 제공하는 서비스

- 깃헙에서는 private으로 업로드한 것들이 아니라면, 다른 사람들이 올린 수많은 코드들과 오픈소스를 확인할 수 있다.
사용자들은 서로의 코드를 구경하고, 공유한다.<br> 또한, 본인이 진행하였던 프로젝트를 깃헙에 올리게 되면 나만의 포트폴리오로 사용할 수 있다.

<br>

## 2. Git 사용하기
### **시작 세팅**
1. 저장소 생성(작업하는 폴더를 git의 관리 하에 두기)<br>
**git init** <br>

2. 내 정보 입력(git을 제어하는 데에 필요한 내 정보 입력, 최초 1회) <br>
**git config -g user.name"내 이름"** <br>
**git config -g user.email"내 이메일 주소"**

<br>

### **타임 캡슐 안에 현재 시점을 저장하기**
3. 폴더 내 변화들과 캡슐 상태 확인(아직 안 묻은 변화 내용을 보여줌) <br>
**git status** <br>

4. 폴더 내 변화 캡슐에 담기(스테이지, 지금 하고 있는 모든 내용을 타임 캡슐 안에 저장) <br>
**git add -A** <br>

5. 변화를 담은 캡슐 묻기(현 상태를 저장, 4번은 담는 것 5번이 저장) <br>
**git commit -m "저장할 제목"** <br>

6. git 상태들 확인, 일련번호/commit 내역 시간 등 <br>
**git log** <br>
**git log --graph --all --decorate** (branch까지 다 확인 가능, 구조적 모습) 

<br>

### **과거로 돌아가기 - Reset, Revert**
- 과감한 방법 : 과거로 돌아가고 돌아간 시점보다 미래인 모든 건 복원할 여지 없이 완전히 삭제 <br>
**git reset 000000 -- hard** (000000 : 돌아가고자 하는 시점의 일련번호 앞 6자리, git log로 확인 가능) <br>

- 안전한 방법 : 과거로 돌아가도 만들어둔 것을 남겨두고 작업, 미래에 한 발 걸쳐두고 돌아가기 <br>
**git revert 000000** + **:wq** 

<br>

### **평행우주 넘나들기, 여러 버전 만들기 - Branch**

1. 가장 기본 세계는 기본적으로 'master'라는 이름을 갖는다. <br>

2. 새 평행우주(branch) 만들기 <br>
**git branch branch이름** <br>

3. 만들어진 브랜치 보기 <br>
**git branch** <br>

4. 특정 브랜치로 이동 <br>
**git checkout branch이름** <br>

5. 브랜치 삭제 <br>
**git branch -D 삭제할branch이름** <br>

6. 다른 브랜치의 변경사항을 현재 브랜치로 가져오기 <br>
**git merge 대상브랜치이름(변경사항을 가져올 branch)** <br>
**git rebase 대상브랜치이름** <br>






